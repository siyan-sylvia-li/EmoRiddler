# -*- coding: utf-8 -*-
"""Recommender System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_jTadLUnokOOJdHiuU4gJPlA3fYt7gK

# Recommender system
"""
import os
import random
import numpy as np
import operator
import pickle
import sys


def get_response(emotion_vector, response_dict):
    scores = {}
    for r in response_dict.keys():
        res = np.dot(emotion_vector, response_dict[r])
        if res in scores:
            list1 = scores[res]
            list1.append(r)
            scores.update({res: list1})
        else:
            scores[res] = [r]

    best_responses = max(scores.items(), key=operator.itemgetter(0))[1]
    return best_responses[np.random.randint(len(best_responses))]

def get_weighted_vector(vector, num):
  new_vector = [v*num for v in vector]
  return new_vector

def get_avg_emotion(emotions, emotion_dict):
    # This function can get a vector for the average emotion based on the dictionary of emotions obtained from the user
    emotion_values = [get_weighted_vector(emotion_dict[e],emotions[e]) for e in emotions.keys() if emotions[e]!=0]
    averages = np.mean(emotion_values, axis=0)
    return averages


with open("recommender_system/emotion_dict.pickle", "rb") as handle:
    emotion_dict = pickle.load(handle)
with open("recommender_system/response_dict.pickle", "rb") as handle:
    response_dict = pickle.load(handle)


"""
    Some refactoring for calling
"""
def emotional_response(emotions):
    global emotion_dict, response_dict
    em_vector = get_avg_emotion(emotions, emotion_dict)
    resp = get_response(em_vector, response_dict)
    print(resp)
    return resp


def main(argv):
    ems = sys.argv[1]
    with open("emotion_dict.pickle", "rb") as handle:
        emotion_dict = pickle.load(handle)

    with open("response_dict.pickle", "rb") as handle:
        response_dict = pickle.load(handle)

    em_vector = get_avg_emotion(ems, emotion_dict)
    print(get_response(em_vector, response_dict))


if __name__ == "__main__":
    main(sys.argv)
